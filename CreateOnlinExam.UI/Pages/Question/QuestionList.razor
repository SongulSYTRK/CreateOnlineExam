@page "/listquestion"
@inject IJSRuntime JSRuntime;
@inject IUnitOfWork unitofwork;


<div class="col-sm-12">
    <div class="card">
        <div class="card-header">
            <h5 class="card-title">Question List</h5>
        </div>
        <div class="card-body">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Title</th>

                        @*//<th>Update</th>*@
                        <th>Delete</th>
                        <th>Detail</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in questions)
                    {

                        <tr id="a_@item.Id">
                            <td>@item.Id</td>
                            <td>@item.Title</td>





                            @*<td>
                                <a @onclick="@(async()=>Update(item.Id))" class="btn btn-sm btn-warning">Update</a>

                            </td>*@
                            <td>
                                <a @onclick="@(async () => Delete(item.Id))" class="btn btn-sm btn-danger">Delete</a>
                            </td>
                            <td>
                                <a @onclick="@(async()=>Detail(item.Id))" class="btn btn-sm btn-success">Detail</a>

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="card-footer">
            <a asp-action="Create" class="btn btn-block btn-dark">Create a Question</a>
        </div>
    </div>
</div>



@code {
    private List<GetQuestionVM> questions = new List<GetQuestionVM>();
    private Question selectedquestion = new Question();

    [JSInvokable]
    protected async void Delete(int id)
    {
        var entity = await unitofwork.QuestionRepository.GetById(id);
        unitofwork.QuestionRepository.Delete(entity);
        await unitofwork.Commit();


    }
    [JSInvokable]
    protected async void Detail(int id)
    {
        var entity = await unitofwork.QuestionRepository.GetById(id);
        
        await unitofwork.Commit();

        
    }

}


